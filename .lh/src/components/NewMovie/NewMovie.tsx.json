{
    "sourceFile": "src/components/NewMovie/NewMovie.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1713276953340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713276959161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import React, { useState } from 'react';\n+import { TextField } from '../TextField';\n+import { Movie } from '../../types/Movie';\n+\n+type NewMovieAdd = {\n+  onAdd: (newMovie: Movie) => void;\n+};\n+\n+export const NewMovie: React.FC<NewMovieAdd> = ({ onAdd }) => {\n+  // Increase the count after successful form submission\n+  // to reset touched status of all the `Field`s\n+  const [count, setCount] = useState(0);\n+  const [title, setTitle] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [imgUrl, setImgUrl] = useState('');\n+  const [imdbUrl, setImdbUrl] = useState('');\n+  const [imdbId, setImdbId] = useState('');\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+  const [errors, setErrors] = useState<{ [key: string]: boolean }>({\n+    title: false,\n+    imgUrl: false,\n+    imdbUrl: false,\n+    imdbId: false,\n+  });\n+\n+  const handleSetTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setTitle(event.target.value);\n+  };\n+\n+  const handleSetDescription = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setDescription(event.target.value);\n+  };\n+\n+  const handleSetImdbUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setImdbUrl(event.target.value);\n+  };\n+\n+  const handleSetImgUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setImgUrl(event.target.value);\n+  };\n+\n+  const handleSetImdbId = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setImdbId(event.target.value);\n+  };\n+\n+  const getFieldValue = (field: string) => {\n+    switch (field) {\n+      case 'title':\n+        return title;\n+      case 'description':\n+        return description;\n+      case 'imgUrl':\n+        return imgUrl;\n+      case 'imdbUrl':\n+        return imdbUrl;\n+      case 'imdbId':\n+        return imdbId;\n+      default:\n+        return '';\n+    }\n+  };\n+\n+  const handleBlur = (field: string) => {\n+    setErrors({ ...errors, [field]: !getFieldValue(field) });\n+  };\n+\n+  const submitData = (event: React.FormEvent) => {\n+    event.preventDefault();\n+    const newMovie: Movie = {\n+      title,\n+      description,\n+      imgUrl,\n+      imdbUrl,\n+      imdbId,\n+    };\n+\n+    onAdd(newMovie);\n+\n+    setCount(prevCount => prevCount + 1);\n+\n+    setTitle('');\n+    setDescription('');\n+    setImgUrl('');\n+    setImdbUrl('');\n+    setImdbId('');\n+  };\n+\n+  const arrayOfFields = ['title', 'description', 'imgUrl', 'imdbUrl', 'imdbId'];\n+\n+  const handleChange = (\n+    field: string,\n+    event: React.ChangeEvent<HTMLInputElement>,\n+  ) => {\n+    switch (field) {\n+      case 'title':\n+        handleSetTitle(event);\n+        break;\n+      case 'description':\n+        handleSetDescription(event);\n+        break;\n+      case 'imgUrl':\n+        handleSetImgUrl(event);\n+        break;\n+      case 'imdbUrl':\n+        handleSetImdbUrl(event);\n+        break;\n+      case 'imdbId':\n+        handleSetImdbId(event);\n+        break;\n+      default:\n+        break;\n+    }\n+  };\n+\n+  const handleChangeField = (field: string) => {\n+    switch (field) {\n+      case 'title':\n+        return title;\n+      case 'description':\n+        return description;\n+      case 'imgUrl':\n+        return imgUrl;\n+      case 'imdbUrl':\n+        return imdbUrl;\n+      case 'imdbId':\n+        return imdbId;\n+      default:\n+        return;\n+    }\n+  };\n+\n+  return (\n+    <form className=\"NewMovie\" key={count} onSubmit={submitData}>\n+      <h2 className=\"title\">Add a movie</h2>\n+      {arrayOfFields.map(field => (\n+        <TextField\n+          key={field}\n+          name={field}\n+          label={field}\n+          value={handleChangeField(field)}\n+          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n+            handleChange(field, event)\n+          }\n+          required\n+        />\n+      ))}\n+\n+      <div className=\"field is-grouped\">\n+        <div className=\"control\">\n+          <button\n+            type=\"submit\"\n+            data-cy=\"submit-button\"\n+            className=\"button is-link\"\n+          >\n+            Add\n+          </button>\n+        </div>\n+      </div>\n+    </form>\n+  );\n+};\n"
                },
                {
                    "date": 1713277304711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n           label={field}\n           value={handleChangeField(field)}\n           onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n             handleChange(field, event)\n+            onBlur={() => handleBlur(field)}\n           }\n           required\n         />\n       ))}\n"
                },
                {
                    "date": 1713277324702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Movie } from '../../types/Movie';\n \n type NewMovieAdd = {\n   onAdd: (newMovie: Movie) => void;\n+  onBlur: () => void;\n };\n \n export const NewMovie: React.FC<NewMovieAdd> = ({ onAdd }) => {\n   // Increase the count after successful form submission\n"
                },
                {
                    "date": 1713277339460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { Movie } from '../../types/Movie';\n \n type NewMovieAdd = {\n   onAdd: (newMovie: Movie) => void;\n-  onBlur: () => void;\n+  onBlur?: () => void;\n };\n \n export const NewMovie: React.FC<NewMovieAdd> = ({ onAdd }) => {\n   // Increase the count after successful form submission\n"
                },
                {
                    "date": 1713277374728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n           label={field}\n           value={handleChangeField(field)}\n           onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n             handleChange(field, event)\n-            onBlur={() => handleBlur(field)}\n+          onBlur={() => handleBlur(field)}\n           }\n           required\n         />\n       ))}\n@@ -160,165 +160,4 @@\n       </div>\n     </form>\n   );\n };\n-import React, { useState } from 'react';\n-import { TextField } from '../TextField';\n-import { Movie } from '../../types/Movie';\n-\n-type NewMovieAdd = {\n-  onAdd: (newMovie: Movie) => void;\n-};\n-\n-export const NewMovie: React.FC<NewMovieAdd> = ({ onAdd }) => {\n-  // Increase the count after successful form submission\n-  // to reset touched status of all the `Field`s\n-  const [count, setCount] = useState(0);\n-  const [title, setTitle] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [imgUrl, setImgUrl] = useState('');\n-  const [imdbUrl, setImdbUrl] = useState('');\n-  const [imdbId, setImdbId] = useState('');\n-  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n-  const [errors, setErrors] = useState<{ [key: string]: boolean }>({\n-    title: false,\n-    imgUrl: false,\n-    imdbUrl: false,\n-    imdbId: false,\n-  });\n-\n-  const handleSetTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n-    setTitle(event.target.value);\n-  };\n-\n-  const handleSetDescription = (event: React.ChangeEvent<HTMLInputElement>) => {\n-    setDescription(event.target.value);\n-  };\n-\n-  const handleSetImdbUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n-    setImdbUrl(event.target.value);\n-  };\n-\n-  const handleSetImgUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n-    setImgUrl(event.target.value);\n-  };\n-\n-  const handleSetImdbId = (event: React.ChangeEvent<HTMLInputElement>) => {\n-    setImdbId(event.target.value);\n-  };\n-\n-  const getFieldValue = (field: string) => {\n-    switch (field) {\n-      case 'title':\n-        return title;\n-      case 'description':\n-        return description;\n-      case 'imgUrl':\n-        return imgUrl;\n-      case 'imdbUrl':\n-        return imdbUrl;\n-      case 'imdbId':\n-        return imdbId;\n-      default:\n-        return '';\n-    }\n-  };\n-\n-  // const handleBlur = (field: string) => {\n-  //   setErrors({ ...errors, [field]: !getFieldValue(field) });\n-  // };\n-\n-  const submitData = (event: React.FormEvent) => {\n-    event.preventDefault();\n-    const newMovie: Movie = {\n-      title,\n-      description,\n-      imgUrl,\n-      imdbUrl,\n-      imdbId,\n-    };\n-\n-    onAdd(newMovie);\n-\n-    setCount(prevCount => prevCount + 1);\n-\n-    setTitle('');\n-    setDescription('');\n-    setImgUrl('');\n-    setImdbUrl('');\n-    setImdbId('');\n-  };\n-\n-  const arrayOfFields = ['title', 'description', 'imgUrl', 'imdbUrl', 'imdbId'];\n-\n-  const handleChange = (\n-    field: string,\n-    event: React.ChangeEvent<HTMLInputElement>,\n-  ) => {\n-    switch (field) {\n-      case 'title':\n-        handleSetTitle(event);\n-        break;\n-      case 'description':\n-        handleSetDescription(event);\n-        break;\n-      case 'imgUrl':\n-        handleSetImgUrl(event);\n-        break;\n-      case 'imdbUrl':\n-        handleSetImdbUrl(event);\n-        break;\n-      case 'imdbId':\n-        handleSetImdbId(event);\n-        break;\n-      default:\n-        break;\n-    }\n-  };\n-\n-  const handleChangeField = (field: string) => {\n-    switch (field) {\n-      case 'title':\n-        return title;\n-      case 'description':\n-        return description;\n-      case 'imgUrl':\n-        return imgUrl;\n-      case 'imdbUrl':\n-        return imdbUrl;\n-      case 'imdbId':\n-        return imdbId;\n-      default:\n-        return;\n-    }\n-  };\n-\n-  return (\n-    <form className=\"NewMovie\" key={count} onSubmit={submitData}>\n-      <h2 className=\"title\">Add a movie</h2>\n-      {arrayOfFields.map(field => (\n-        <TextField\n-          key={field}\n-          name={field}\n-          label={field}\n-          value={handleChangeField(field)}\n-          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n-            handleChange(field, event)\n-          }\n-          required\n-        />\n-      ))}\n-\n-      <div className=\"field is-grouped\">\n-        <div className=\"control\">\n-          <button\n-            type=\"submit\"\n-            data-cy=\"submit-button\"\n-            className=\"button is-link\"\n-          >\n-            Add\n-          </button>\n-        </div>\n-      </div>\n-    </form>\n-  );\n-};\n"
                },
                {
                    "date": 1713277379782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,8 @@\n           label={field}\n           value={handleChangeField(field)}\n           onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n             handleChange(field, event)\n-            \n           }\n           required\n         />\n       ))}\n"
                },
                {
                    "date": 1713277387318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import React, { useState } from 'react';\n+import { TextField } from '../TextField';\n+import { Movie } from '../../types/Movie';\n+\n+type NewMovieAdd = {\n+  onAdd: (newMovie: Movie) => void;\n+};\n+\n+export const NewMovie: React.FC<NewMovieAdd> = ({ onAdd }) => {\n+  // Increase the count after successful form submission\n+  // to reset touched status of all the `Field`s\n+  const [count, setCount] = useState(0);\n+  const [title, setTitle] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [imgUrl, setImgUrl] = useState('');\n+  const [imdbUrl, setImdbUrl] = useState('');\n+  const [imdbId, setImdbId] = useState('');\n+  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+  const [errors, setErrors] = useState<{ [key: string]: boolean }>({\n+    title: false,\n+    imgUrl: false,\n+    imdbUrl: false,\n+    imdbId: false,\n+  });\n+\n+  const handleSetTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setTitle(event.target.value);\n+  };\n+\n+  const handleSetDescription = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setDescription(event.target.value);\n+  };\n+\n+  const handleSetImdbUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setImdbUrl(event.target.value);\n+  };\n+\n+  const handleSetImgUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setImgUrl(event.target.value);\n+  };\n+\n+  const handleSetImdbId = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    setImdbId(event.target.value);\n+  };\n+\n+  const getFieldValue = (field: string) => {\n+    switch (field) {\n+      case 'title':\n+        return title;\n+      case 'description':\n+        return description;\n+      case 'imgUrl':\n+        return imgUrl;\n+      case 'imdbUrl':\n+        return imdbUrl;\n+      case 'imdbId':\n+        return imdbId;\n+      default:\n+        return '';\n+    }\n+  };\n+\n+  const handleBlur = (field: string) => {\n+    setErrors({ ...errors, [field]: !getFieldValue(field) });\n+  };\n+\n+  const submitData = (event: React.FormEvent) => {\n+    event.preventDefault();\n+    const newMovie: Movie = {\n+      title,\n+      description,\n+      imgUrl,\n+      imdbUrl,\n+      imdbId,\n+    };\n+\n+    onAdd(newMovie);\n+\n+    setCount(prevCount => prevCount + 1);\n+\n+    setTitle('');\n+    setDescription('');\n+    setImgUrl('');\n+    setImdbUrl('');\n+    setImdbId('');\n+  };\n+\n+  const arrayOfFields = ['title', 'description', 'imgUrl', 'imdbUrl', 'imdbId'];\n+\n+  const handleChange = (\n+    field: string,\n+    event: React.ChangeEvent<HTMLInputElement>,\n+  ) => {\n+    switch (field) {\n+      case 'title':\n+        handleSetTitle(event);\n+        break;\n+      case 'description':\n+        handleSetDescription(event);\n+        break;\n+      case 'imgUrl':\n+        handleSetImgUrl(event);\n+        break;\n+      case 'imdbUrl':\n+        handleSetImdbUrl(event);\n+        break;\n+      case 'imdbId':\n+        handleSetImdbId(event);\n+        break;\n+      default:\n+        break;\n+    }\n+  };\n+\n+  const handleChangeField = (field: string) => {\n+    switch (field) {\n+      case 'title':\n+        return title;\n+      case 'description':\n+        return description;\n+      case 'imgUrl':\n+        return imgUrl;\n+      case 'imdbUrl':\n+        return imdbUrl;\n+      case 'imdbId':\n+        return imdbId;\n+      default:\n+        return;\n+    }\n+  };\n+\n+  return (\n+    <form className=\"NewMovie\" key={count} onSubmit={submitData}>\n+      <h2 className=\"title\">Add a movie</h2>\n+      {arrayOfFields.map(field => (\n+        <TextField\n+          key={field}\n+          name={field}\n+          label={field}\n+          value={handleChangeField(field)}\n+          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n+            handleChange(field, event)\n+          }\n+          onBlur={() => handleBlur(field)}\n+          required\n+        />\n+      ))}\n+\n+      <div className=\"field is-grouped\">\n+        <div className=\"control\">\n+          <button\n+            type=\"submit\"\n+            data-cy=\"submit-button\"\n+            className=\"button is-link\"\n+          >\n+            Add\n+          </button>\n+        </div>\n+      </div>\n+    </form>\n+  );\n+};\n"
                }
            ],
            "date": 1713276953340,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype NewMovieAdd = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<NewMovieAdd> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [errors, setErrors] = useState<{ [key: string]: boolean }>({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const handleSetTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleSetDescription = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDescription(event.target.value);\n  };\n\n  const handleSetImdbUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImdbUrl(event.target.value);\n  };\n\n  const handleSetImgUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImgUrl(event.target.value);\n  };\n\n  const handleSetImdbId = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImdbId(event.target.value);\n  };\n\n  const getFieldValue = (field: string) => {\n    switch (field) {\n      case 'title':\n        return title;\n      case 'description':\n        return description;\n      case 'imgUrl':\n        return imgUrl;\n      case 'imdbUrl':\n        return imdbUrl;\n      case 'imdbId':\n        return imdbId;\n      default:\n        return '';\n    }\n  };\n\n  // const handleBlur = (field: string) => {\n  //   setErrors({ ...errors, [field]: !getFieldValue(field) });\n  // };\n\n  const submitData = (event: React.FormEvent) => {\n    event.preventDefault();\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n\n    setCount(prevCount => prevCount + 1);\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const arrayOfFields = ['title', 'description', 'imgUrl', 'imdbUrl', 'imdbId'];\n\n  const handleChange = (\n    field: string,\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    switch (field) {\n      case 'title':\n        handleSetTitle(event);\n        break;\n      case 'description':\n        handleSetDescription(event);\n        break;\n      case 'imgUrl':\n        handleSetImgUrl(event);\n        break;\n      case 'imdbUrl':\n        handleSetImdbUrl(event);\n        break;\n      case 'imdbId':\n        handleSetImdbId(event);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleChangeField = (field: string) => {\n    switch (field) {\n      case 'title':\n        return title;\n      case 'description':\n        return description;\n      case 'imgUrl':\n        return imgUrl;\n      case 'imdbUrl':\n        return imdbUrl;\n      case 'imdbId':\n        return imdbId;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={submitData}>\n      <h2 className=\"title\">Add a movie</h2>\n      {arrayOfFields.map(field => (\n        <TextField\n          key={field}\n          name={field}\n          label={field}\n          value={handleChangeField(field)}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            handleChange(field, event)\n          }\n          required\n        />\n      ))}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n"
        }
    ]
}